package telegram

import (
	"database/sql"
	"log"

	"github.com/Corray333/quiz_bot/internal/types"
	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

type Storage interface {
	UpdateUser(user *types.User) error
	CreateUser(user *types.User) error
	GetAllUsers() ([]types.User, error)
	GetUserByID(user_id int64) (*types.User, error)
}

const (
	StateWaitingFIO = iota + 1
	StateWaitingEmail
	StateWaitingDirection
	StateWaitingGroup
)

const (
	StateNothing = iota + 1
	StateWaitingUserTypePick
	StateWaitingMessageText
	StateWaitingMessageAttachment
	StateWaitingSending
)

type TelegramClient struct {
	bot   *tgbotapi.BotAPI
	store Storage
}

var messages = []string{
	"–ù–µ –ø–æ–Ω–∏–º–∞—é, —á–µ–≥–æ —Ç—ã —Ö–æ—á–µ—à—åüòÖ",
	"–ü—Ä–æ—Å—Ç–∏, —è —Ç–µ–±—è –Ω–µ –ø–æ–Ω—è–ªü§î",
	"–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –ø–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞üôè",
	"–ù–µ –º–æ–≥—É —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è, –ø–æ–ø—Ä–æ–±—É–π –∏–Ω–∞—á–µüòâ",
	"–ü–æ—Ö–æ–∂–µ, —è —Ç–µ–±—è –Ω–µ –ø–æ–Ω–∏–º–∞—éüòï",
	"–î–∞–≤–∞–π –ø–æ–ø—Ä–æ–±—É–µ–º –µ—â–µ —Ä–∞–∑, —è —Ç–µ–±—è –Ω–µ –ø–æ–Ω—è–ªüòä",
	"–ú–æ–∂–µ—Ç –±—ã—Ç—å, —è —á—Ç–æ-—Ç–æ —É–ø—É—Å—Ç–∏–ª. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑üòå",
	"–ò–∑–≤–∏–Ω–∏, —è —Ç–µ–±—è –Ω–µ –ø–æ–Ω—è–ª. –ü–æ–ø—Ä–æ–±—É–π —Å—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –∏–Ω–∞—á–µü§∑‚Äç‚ôÇÔ∏è",
	"–Ø –Ω–µ —Å–æ–≤—Å–µ–º –ø–æ–Ω—è–ª —Ç–≤–æ—ë –¥–µ–π—Å—Ç–≤–∏–µ. –ü–æ–ø—Ä–æ–±—É–π —á—Ç–æ-—Ç–æ –¥—Ä—É–≥–æ–µüôÉ",
	"–ù–µ –º–æ–≥—É —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ç–≤–æ–π –∑–∞–ø—Ä–æ—Å. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞üßê",
}

func NewClient(token string, store Storage) *TelegramClient {
	bot, err := tgbotapi.NewBotAPI(token)
	if err != nil {
		log.Fatal("Failed to create bot: ", err)
	}

	bot.Debug = true

	return &TelegramClient{
		bot:   bot,
		store: store,
	}
}

func (tg *TelegramClient) Run() {
	defer func() {
		if r := recover(); r != nil {
			tg.HandleError("panic: " + r.(string))
		}
	}()
	u := tgbotapi.NewUpdate(0)
	u.Timeout = 60

	updates := tg.bot.GetUpdatesChan(u)

	for update := range updates {
		if update.Message == nil && update.CallbackQuery == nil {
			continue
		}

		user, err := tg.store.GetUserByID(update.Message.Chat.ID)
		if err != nil {
			tg.HandleError("error while getting user from db: "+err.Error(), "update_id", update.UpdateID)
			return
		}

		switch {
		case user.IsAdmin:
			tg.handleAdminUpdate(user, update)
			continue
		default:
			tg.handleUserUpdate(user, update)
			continue
		}

	}
}

func (tg *TelegramClient) handleUserUpdate(user *types.User, update tgbotapi.Update) {

	switch {
	}

	if err := tg.store.UpdateUser(user); err != nil {
		tg.HandleError("error while updating user: "+err.Error(), "update_id", update.UpdateID)
	}
}

func (tg *TelegramClient) handleAdminUpdate(user *types.User, update tgbotapi.Update) {

}

func (tg *TelegramClient) sendWelcomeMessage(chatID int64) {
	_, err := tg.store.GetUserByID(chatID)
	if err != nil {
		if err == sql.ErrNoRows {
			button := tgbotapi.NewKeyboardButtonContact("–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç")
			keyboard := tgbotapi.NewReplyKeyboard([]tgbotapi.KeyboardButton{button})
			msg := tgbotapi.NewMessage(chatID, "–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –∫–æ–º–∞–Ω–¥–∞ Incetro.\n–ß—Ç–æ–±—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –Ω–∞ —Å—Ç–∞–∂–∏—Ä–æ–≤–∫—É, –ø–æ–¥–µ–ª–∏—Å—å —Å–≤–æ–∏–º –∫–æ–Ω—Ç–∞–∫—Ç–æ–ºü§ô")
			msg.ReplyMarkup = keyboard
			if _, err := tg.bot.Send(msg); err != nil {
				tg.HandleError("error while sending message: "+err.Error(), "chat_id", chatID)
				return
			}
			return
		}
		tg.HandleError("error while getting user from db: "+err.Error(), "chat_id", chatID)
		return
	}
	msg := tgbotapi.NewMessage(chatID, "–ü—Ä–æ—Å—Ç–∏, –Ω–æ —è –Ω–µ –ø–æ–Ω–∏–º–∞—é, —á—Ç–æ —Ç—ã –æ—Ç –º–µ–Ω—è —Ö–æ—á–µ—à—åüò•")
	if _, err := tg.bot.Send(msg); err != nil {
		tg.HandleError("error while sending message: "+err.Error(), "chat_id", chatID)
		return
	}

}
